{"version":3,"sources":["../src/interfaces/controllers/LocationController.ts","../src/infrastructure/services/CacheService.ts","../src/application/services/LocationService.ts","../src/infrastructure/repositories/LocationRepository.ts","../src/infrastructure/api/openWeatherApi.ts","../src/application/routes/locationRoutes.ts","../src/index.ts"],"names":["searchParamsSchema","z","LocationController","locationService","req","res","validation","locations","error","CacheService","createClient","err","key","value","ttl","stringValue","args","LocationService","locationRepository","weatherApi","params","cacheKey","cachedResults","locationsWithWeather","location","weather","__spreadProps","__spreadValues","requestedCondition","filteredLocations","result","actualCondition","LocationRepository","latitude","longitude","radius","filteredCities","city","a","b","OpenWeatherApi","lat","lon","_a","_b","cachedCities","allLocations","bbox","response","axios","place","distance","villageResponse","villageLocations","locationsWithDrivingDistance","uniqueLocations","latDelta","lonDelta","minLon","minLat","maxLon","maxLat","seen","existing","date","_c","_d","_e","_f","_g","_h","_i","_j","cachedWeather","today","diffTime","diffDays","forecast","history","lat1","lon1","lat2","lon2","dLat","dLon","c","originLat","originLon","l","cachedDistances","batches","i","batch","destinations","loc","index","element","resolve","router","Router","locationController","locationRoutes_default","_","app","express","PORT"],"mappings":"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","file":"index.js","sourcesContent":["import { Request, Response } from \"express\";\nimport { LocationService } from \"../../application/services/LocationService\";\nimport { z } from \"zod\";\n\nconst searchParamsSchema = z.object({\n  latitude: z.string().transform(Number).pipe(z.number().min(-90).max(90)),\n  longitude: z.string().transform(Number).pipe(z.number().min(-180).max(180)),\n  radius: z.string().transform(Number).pipe(z.number().positive()),\n  weatherCondition: z.string().optional(),\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/).optional(),\n});\n\nexport class LocationController {\n  constructor(private readonly locationService: LocationService) {}\n\n  async search(req: Request, res: Response) {\n    try {\n      const validation = searchParamsSchema.safeParse(req.query);\n\n      if (!validation.success) {\n        return res.status(400).json({ errors: validation.error.errors });\n      }\n\n      const locations = await this.locationService.findLocations(\n        validation.data\n      );\n      return res.json(locations);\n    } catch (error) {\n      console.error('Error in location search:', error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  }\n}\n","import { createClient, RedisClientType } from 'redis';\n\nexport class CacheService {\n  private client: RedisClientType;\n  private isConnected: boolean = false;\n\n  constructor() {\n    this.client = createClient({\n      password: process.env.REDIS_PASSWORD,\n      socket: {\n        host: process.env.REDIS_HOST,\n        port: parseInt(process.env.REDIS_PORT || '14158')\n      }\n    });\n\n    this.client.on('error', (err) => console.error('Redis Client Error', err));\n    this.client.on('connect', () => console.log('Redis Client Connected'));\n    this.client.on('ready', () => {\n      this.isConnected = true;\n      console.log('Redis Client Ready');\n    });\n    this.client.on('end', () => {\n      this.isConnected = false;\n      console.log('Redis Client Connection Ended');\n    });\n\n    // Connect to Redis\n    this.connect();\n  }\n\n  private async connect() {\n    if (!this.isConnected) {\n      await this.client.connect();\n    }\n  }\n\n  async get<T>(key: string): Promise<T | undefined> {\n    try {\n      const value = await this.client.get(key);\n      return value ? JSON.parse(value) : undefined;\n    } catch (error) {\n      console.error('Redis Get Error:', error);\n      return undefined;\n    }\n  }\n\n  async set<T>(key: string, value: T, ttl?: number): Promise<boolean> {\n    try {\n      const stringValue = JSON.stringify(value);\n      if (ttl) {\n        await this.client.setEx(key, ttl, stringValue);\n      } else {\n        await this.client.set(key, stringValue);\n      }\n      return true;\n    } catch (error) {\n      console.error('Redis Set Error:', error);\n      return false;\n    }\n  }\n\n  async del(key: string): Promise<number> {\n    try {\n      return await this.client.del(key);\n    } catch (error) {\n      console.error('Redis Del Error:', error);\n      return 0;\n    }\n  }\n\n  async flush(): Promise<void> {\n    try {\n      await this.client.flushAll();\n    } catch (error) {\n      console.error('Redis Flush Error:', error);\n    }\n  }\n\n  // Generate consistent cache keys\n  static generateKey(...args: (string | number)[]): string {\n    return args.join(':');\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.isConnected) {\n      await this.client.quit();\n    }\n  }\n} ","import { Location, LocationSearchParams } from \"@/domain/entities/Location\";\nimport { ILocationRepository } from \"@/domain/repositories/ILocationRepository\";\nimport { OpenWeatherApi } from \"@/infrastructure/api/openWeatherApi\";\nimport { CacheService } from '@/infrastructure/services/CacheService';\n\nexport class LocationService {\n  private readonly cacheService: CacheService;\n\n  constructor(\n    private readonly locationRepository: ILocationRepository,\n    private readonly weatherApi: OpenWeatherApi\n  ) {\n    this.cacheService = new CacheService();\n  }\n\n  async findLocations(params: LocationSearchParams): Promise<Location[]> {\n    const cacheKey = CacheService.generateKey(\n      'locations',\n      params.latitude.toString(),\n      params.longitude.toString(),\n      params.radius.toString(),\n      params.weatherCondition || 'none',\n      params.date || 'current'\n    );\n\n    const cachedResults = await this.cacheService.get<Location[]>(cacheKey);\n    if (cachedResults) {\n      console.log('Returning cached results');\n      return cachedResults;\n    }\n\n    console.log(\"Finding locations with params:\", params);\n\n    const locations = await this.locationRepository.findWithinRadius(\n      params.latitude,\n      params.longitude,\n      params.radius\n    );\n\n    console.log(\"Found initial locations:\", locations);\n\n    if (params.weatherCondition) {\n      console.log(\"Filtering by weather condition:\", params.weatherCondition);\n\n      type LocationWithWeather = Location & {\n        weather: NonNullable<Location[\"weather\"]>;\n      };\n\n      const locationsWithWeather = await Promise.allSettled(\n        locations.map(async (location: Location) => {\n          try {\n            const weather = await this.weatherApi.getWeather(\n              location.latitude,\n              location.longitude\n            );\n            console.log(`Weather for ${location.city}:`, weather);\n            return {\n              ...location,\n              weather,\n            } as LocationWithWeather;\n          } catch (error) {\n            console.error(\n              `Failed to fetch weather for ${location.city}:`,\n              error\n            );\n            return null;\n          }\n        })\n      );\n\n      console.log(\"All weather results:\", locationsWithWeather);\n\n      const requestedCondition = params.weatherCondition\n        .replace(/\"/g, '')\n        .toLowerCase()\n        .trim();\n\n      const filteredLocations = locationsWithWeather\n        .filter(\n          (result): result is PromiseFulfilledResult<LocationWithWeather | null> =>\n            result.status === \"fulfilled\"\n        )\n        .map((result) => result.value)\n        .filter((location): location is LocationWithWeather => {\n          if (!location || !location.weather) return false;\n          \n          const actualCondition = location.weather.condition.toLowerCase().trim();\n          \n          console.log(`Comparing weather for ${location.city}:`, {\n            requested: requestedCondition,\n            actual: actualCondition,\n            matches: actualCondition.includes(requestedCondition)\n          });\n\n          return actualCondition.includes(requestedCondition);\n        });\n\n      console.log(\"Filtered locations by weather:\", filteredLocations);\n\n      // Cache the final results\n      this.cacheService.set(cacheKey, filteredLocations, 900); // Cache for 15 minutes\n      return filteredLocations;\n    }\n\n    return locations;\n  }\n}\n","import { ILocationRepository } from '@/domain/repositories/ILocationRepository';\nimport { Location } from '@/domain/entities/Location';\nimport { OpenWeatherApi } from '../api/openWeatherApi';\n\nexport class LocationRepository implements ILocationRepository {\n  constructor(private readonly weatherApi: OpenWeatherApi) {}\n\n  async findWithinRadius(\n    latitude: number,\n    longitude: number,\n    radius: number\n  ): Promise<Location[]> {\n    console.log('Searching for cities within', radius, 'km of', latitude, longitude);\n    \n    // Get nearby cities from OpenWeather Geocoding API with driving distances\n    const cities = await this.weatherApi.findNearbyCities(latitude, longitude, radius);\n    \n    // Filter by radius and sort by driving distance\n    const filteredCities = cities\n      .filter(city => city.distance <= radius)\n      .sort((a, b) => a.distance - b.distance);\n\n    console.log(`Found ${filteredCities.length} cities within ${radius}km driving distance`);\n    return filteredCities;\n  }\n} ","import axios from \"axios\";\nimport { Location } from \"@/domain/entities/Location\";\nimport { CacheService } from \"../services/CacheService\";\n\ninterface NominatimResponse {\n  name: string;\n  lat: string;\n  lon: string;\n  address: {\n    city?: string;\n    town?: string;\n    village?: string;\n    state?: string;\n    country?: string;\n  };\n  type: string;\n  class: string;\n  display_name: string;\n}\n\ninterface WeatherApiResponse {\n  current?: {\n    temp_c: number;\n    condition: {\n      text: string;\n    };\n  };\n  forecast?: {\n    forecastday: Array<{\n      date: string;\n      day: {\n        avgtemp_c: number;\n        condition: {\n          text: string;\n        };\n      };\n    }>;\n  };\n  history?: {\n    forecast: {\n      forecastday: Array<{\n        date: string;\n        day: {\n          avgtemp_c: number;\n          condition: {\n            text: string;\n          };\n        };\n      }>;\n    };\n  };\n}\n\ninterface GoogleDistanceResponse {\n  rows: [\n    {\n      elements: [\n        {\n          distance: {\n            value: number; // distance in meters\n          };\n          status: string;\n        }\n      ];\n    }\n  ];\n  status: string;\n}\n\nexport class OpenWeatherApi {\n  private readonly weatherApiKey: string;\n  private readonly googleMapsKey: string;\n  private readonly cacheService: CacheService;\n\n  constructor() {\n    this.weatherApiKey = process.env.WEATHER_API_KEY!;\n    this.googleMapsKey = process.env.GOOGLE_MAPS_API_KEY!;\n    if (!this.weatherApiKey) {\n      throw new Error(\"Weather API key is not configured\");\n    }\n    if (!this.googleMapsKey) {\n      throw new Error(\"Google Maps API key is not configured\");\n    }\n\n    // Initialize cache with different TTLs\n    this.cacheService = new CacheService();\n  }\n\n  async findNearbyCities(\n    lat: number,\n    lon: number,\n    radius: number = 100\n  ): Promise<Location[]> {\n    const cacheKey = CacheService.generateKey(\n      \"cities\",\n      lat.toString(),\n      lon.toString(),\n      radius.toString()\n    );\n    const cachedCities = await this.cacheService.get<Location[]>(cacheKey) || [];\n\n    if (cachedCities.length > 0) {\n      console.log(\"Returning cached cities\");\n      return cachedCities;\n    }\n\n    try {\n      const allLocations: Location[] = [];\n\n      // Calculate bounding box for the search area\n      const bbox = this.calculateBBox(lat, lon, radius);\n\n      // Search for cities and towns in the area\n      const response = await axios.get<NominatimResponse[]>(\n        `https://nominatim.openstreetmap.org/search`,\n        {\n          params: {\n            format: \"json\",\n            \"accept-language\": \"en\",\n            addressdetails: 1,\n            limit: 50,\n            q: \"[place=city] OR [place=town]\",\n            viewbox: bbox,\n            bounded: 1,\n          },\n          headers: {\n            \"User-Agent\": \"TravelTracer/1.0\",\n          },\n        }\n      );\n\n      console.log(\"Raw Nominatim response:\", response.data);\n\n      if (response.data && Array.isArray(response.data)) {\n        const locations = response.data\n          .filter((place) => {\n            return (\n              place.class === \"place\" &&\n              [\"city\", \"town\", \"village\"].includes(place.type)\n            );\n          })\n          .map((place) => {\n            const distance = this.calculateDistance(\n              lat,\n              lon,\n              parseFloat(place.lat),\n              parseFloat(place.lon)\n            );\n            return {\n              city: place.name,\n              state: place.address.state,\n              country: place.address.country || \"\",\n              latitude: parseFloat(place.lat),\n              longitude: parseFloat(place.lon),\n              distance,\n              weather: undefined,\n            };\n          })\n          .filter((location) => location.distance <= radius);\n\n        allLocations.push(...locations);\n      }\n\n      // Try a second search specifically for villages\n      const villageResponse = await axios.get<NominatimResponse[]>(\n        `https://nominatim.openstreetmap.org/search`,\n        {\n          params: {\n            format: \"json\",\n            \"accept-language\": \"en\",\n            addressdetails: 1,\n            limit: 50,\n            q: \"[place=village]\",\n            viewbox: bbox,\n            bounded: 1,\n          },\n          headers: {\n            \"User-Agent\": \"TravelTracer/1.0\",\n          },\n        }\n      );\n\n      if (villageResponse.data && Array.isArray(villageResponse.data)) {\n        const villageLocations = villageResponse.data\n          .filter(\n            (place) => place.class === \"place\" && place.type === \"village\"\n          )\n          .map((place) => {\n            const distance = this.calculateDistance(\n              lat,\n              lon,\n              parseFloat(place.lat),\n              parseFloat(place.lon)\n            );\n            return {\n              city: place.name,\n              state: place.address.state,\n              country: place.address.country || \"\",\n              latitude: parseFloat(place.lat),\n              longitude: parseFloat(place.lon),\n              distance,\n              weather: undefined,\n            };\n          })\n          .filter((location) => location.distance <= radius);\n\n        allLocations.push(...villageLocations);\n      }\n\n      // After getting locations, calculate driving distances\n      const locationsWithDrivingDistance = await this.addDrivingDistances(\n        lat,\n        lon,\n        allLocations\n      );\n\n      // Remove duplicates and sort by distance\n      const uniqueLocations = this.removeDuplicates(\n        locationsWithDrivingDistance\n      );\n      console.log(\n        `Found ${uniqueLocations.length} unique cities within ${radius}km radius`\n      );\n\n      // Cache the results before returning\n      this.cacheService.set(cacheKey, uniqueLocations, 3600); // Cache for 1 hour\n      return uniqueLocations.sort((a, b) => a.distance - b.distance);\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        console.error(\"Location Search Error:\", {\n          status: error.response?.status,\n          data: error.response?.data,\n          message: error.message,\n        });\n      }\n      throw new Error(\"Failed to fetch nearby cities\");\n    }\n  }\n\n  private calculateBBox(lat: number, lon: number, radius: number): string {\n    // Convert radius from km to degrees (approximate)\n    const latDelta = radius / 111.32; // 1 degree of latitude is approximately 111.32 km\n    const lonDelta = radius / (111.32 * Math.cos((lat * Math.PI) / 180));\n\n    const minLon = lon - lonDelta;\n    const minLat = lat - latDelta;\n    const maxLon = lon + lonDelta;\n    const maxLat = lat + latDelta;\n\n    // Format: <min_lon>,<min_lat>,<max_lon>,<max_lat>\n    return `${minLon},${minLat},${maxLon},${maxLat}`;\n  }\n\n  private removeDuplicates(locations: Location[]): Location[] {\n    const seen = new Map<string, Location>();\n\n    locations.forEach((location) => {\n      const key = `${location.city.toLowerCase()}-${\n        location.state?.toLowerCase() || \"\"\n      }-${location.country.toLowerCase()}`;\n      const existing = seen.get(key);\n\n      if (!existing || location.distance < existing.distance) {\n        seen.set(key, location);\n      }\n    });\n\n    return Array.from(seen.values());\n  }\n\n  async getWeather(\n    lat: number,\n    lon: number,\n    date?: string\n  ): Promise<Location[\"weather\"]> {\n    const cacheKey = CacheService.generateKey(\n      \"weather\",\n      lat.toString(),\n      lon.toString(),\n      date || \"current\"\n    );\n    const cachedWeather = await this.cacheService.get<Location[\"weather\"]>(cacheKey);\n    if (cachedWeather) {\n      console.log(\"Returning cached weather\");\n      return cachedWeather;\n    }\n\n    try {\n      if (!date) {\n        // Get current weather\n        const response = await axios.get<WeatherApiResponse>(\n          `http://api.weatherapi.com/v1/current.json`,\n          {\n            params: {\n              key: this.weatherApiKey,\n              q: `${lat},${lon}`,\n            },\n          }\n        );\n\n        if (!response.data?.current) {\n          throw new Error(\"Invalid response from Weather API\");\n        }\n\n        return {\n          temperature: response.data.current.temp_c,\n          condition: response.data.current.condition.text,\n        };\n      }\n\n      const today = new Date();\n      const targetDate = new Date(date);\n      const diffTime = targetDate.getTime() - today.getTime();\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n      if (diffDays > 14) {\n        throw new Error(\"Can only fetch weather up to 14 days in the future\");\n      }\n\n      if (diffDays > 0) {\n        // Get future forecast\n        const response = await axios.get<WeatherApiResponse>(\n          `http://api.weatherapi.com/v1/forecast.json`,\n          {\n            params: {\n              key: this.weatherApiKey,\n              q: `${lat},${lon}`,\n              days: diffDays + 1,\n              dt: date,\n            },\n          }\n        );\n\n        if (!response.data?.forecast?.forecastday?.[0]) {\n          throw new Error(\"Invalid response from Weather API\");\n        }\n\n        const forecast = response.data.forecast.forecastday[0];\n        return {\n          temperature: forecast.day.avgtemp_c,\n          condition: forecast.day.condition.text,\n          date: forecast.date,\n        };\n      } else {\n        // Get historical weather\n        const response = await axios.get<WeatherApiResponse>(\n          `http://api.weatherapi.com/v1/history.json`,\n          {\n            params: {\n              key: this.weatherApiKey,\n              q: `${lat},${lon}`,\n              dt: date,\n            },\n          }\n        );\n\n        if (!response.data?.history?.forecast?.forecastday?.[0]) {\n          throw new Error(\"Invalid response from Weather API\");\n        }\n\n        const history = response.data.history.forecast.forecastday[0];\n        return {\n          temperature: history.day.avgtemp_c,\n          condition: history.day.condition.text,\n          date: history.date,\n        };\n      }\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        console.error(\"Weather API Error:\", {\n          status: error.response?.status,\n          data: error.response?.data,\n          message: error.message,\n        });\n      }\n      throw new Error(\"Failed to fetch weather data\");\n    }\n  }\n\n  private calculateDistance(\n    lat1: number,\n    lon1: number,\n    lat2: number,\n    lon2: number\n  ): number {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(lat1 * (Math.PI / 180)) *\n        Math.cos(lat2 * (Math.PI / 180)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return Math.round(R * c);\n  }\n\n  private async addDrivingDistances(\n    originLat: number,\n    originLon: number,\n    locations: Location[]\n  ): Promise<Location[]> {\n    const cacheKey = CacheService.generateKey(\n      \"distances\",\n      originLat.toString(),\n      originLon.toString(),\n      locations.map((l) => `${l.latitude},${l.longitude}`).join(\",\")\n    );\n    const cachedDistances = await this.cacheService.get<Location[]>(cacheKey) || [];\n\n    if (cachedDistances.length > 0) {\n      console.log(\"Returning cached distances\");\n      return cachedDistances;\n    }\n\n    try {\n      // Google Maps API has a limit of 25 destinations per request\n      const batchSize = 25;\n      const batches = [];\n\n      for (let i = 0; i < locations.length; i += batchSize) {\n        batches.push(locations.slice(i, i + batchSize));\n      }\n\n      const locationsWithDrivingDistance: Location[] = [];\n\n      for (const batch of batches) {\n        const destinations = batch\n          .map((loc) => `${loc.latitude},${loc.longitude}`)\n          .join(\"|\");\n\n        const response = await axios.get<GoogleDistanceResponse>(\n          \"https://maps.googleapis.com/maps/api/distancematrix/json\",\n          {\n            params: {\n              origins: `${originLat},${originLon}`,\n              destinations: destinations,\n              mode: \"driving\",\n              key: this.googleMapsKey,\n            },\n          }\n        );\n\n        console.log(\"Google Distance Response:\", response.data);\n\n        if (response.data.status === \"OK\") {\n          batch.forEach((location, index) => {\n            const element = response.data.rows[0].elements[index];\n            if (element.status === \"OK\") {\n              locationsWithDrivingDistance.push({\n                ...location,\n                distance: Math.round(element.distance.value / 1000), // Convert meters to kilometers\n                straightLineDistance: this.calculateDistance(\n                  originLat,\n                  originLon,\n                  location.latitude,\n                  location.longitude\n                ),\n              });\n            } else {\n              // Fallback to straight-line distance if driving route not found\n              locationsWithDrivingDistance.push({\n                ...location,\n                distance: this.calculateDistance(\n                  originLat,\n                  originLon,\n                  location.latitude,\n                  location.longitude\n                ),\n              });\n            }\n          });\n        }\n\n        // Add delay to respect rate limits\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n\n      this.cacheService.set(cacheKey, locationsWithDrivingDistance, 86400); // Cache for 24 hours\n      return locationsWithDrivingDistance;\n    } catch (error) {\n      console.error(\"Error calculating driving distances:\", error);\n      // Fallback to straight-line distances if Google Maps API fails\n      return locations.map((location) => ({\n        ...location,\n        distance: this.calculateDistance(\n          originLat,\n          originLon,\n          location.latitude,\n          location.longitude\n        ),\n      }));\n    }\n  }\n}\n","import { Router } from \"express\";\nimport { LocationController } from \"@/interfaces/controllers/LocationController\";\nimport { LocationService } from \"@/application/services/LocationService\";\nimport { LocationRepository } from \"@/infrastructure/repositories/LocationRepository\";\nimport { OpenWeatherApi } from \"@/infrastructure/api/openWeatherApi\";\n\nconst router = Router();\n\nconst weatherApi = new OpenWeatherApi();\nconst locationRepository = new LocationRepository(weatherApi);\nconst locationService = new LocationService(locationRepository, weatherApi);\nconst locationController = new LocationController(locationService);\n\nrouter.get(\"/search\", (req, res) => locationController.search(req, res));\n\nexport default router;\n","import express from \"express\";\nimport * as dotenv from \"dotenv\";\nimport { resolve } from \"path\";\nimport locationRoutes from \"./application/routes/locationRoutes\";\n\ndotenv.config({ path: resolve(__dirname, \"../.env\") });\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(express.json());\napp.use(\"/api/locations\", locationRoutes);\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"]}